# The next section covers options for the Discord bot.
[discord]

# This will tell the bot to recognize you as its owner, granting you access to restricted commands.
# To get your Discord ID, open Discord and go to Settings -> Appearance and enable Developer Mode.
# Then right click on your name in the sidebar somewhere and choose Copy ID. Paste it into the field below.
owner_id = 13374209991234567890

# First of all, do you want the bot to connect to Discord?
# 1 = yes, 0 = no
use_discord = 1

# Next, you'll need to register for a Bot Account over at [discordapp.com/developers](https://discordapp.com/developers/docs/intro).
# Set up an application, name it whatever you like. The Redirect/Callback URL isn't important since we're not doing OAuth, so just set it to whatever.
# Once you have converted the app to a Bot Account, you should be able to see the Client ID and Token on your Applications page.
# Enter them both here.
client_id = xxxxx
token = xxxxx


# Set this to the name of your bot.
name = DickBot9000

# Set the "Playing" status of your bot
playing = with myself

# Set a character (or characters) to use as a command prefix.
# The default of '!' is fine for servers with few bots, but it's a common one
# and will most likely cause conflicts on busier servers with more bots.
trigger = !

# Set this to the same thing you entered for the Redirect/Callback URL in your Discord app.
redirect_url = http://github.com/vsTerminus

# Do you want this bot to automatically try to reconnect if the connection is closed for any reason? You probably do.
# If you don't enable this you'll have to define an on_finish callback and handle that event yourself with $discord->gw_resume.
# 1 = yes, 0 = no
auto_reconnect = 1

# Control the mimimum level of info written to the log file.
# Valid options are: fatal, error, warn, info, debug
# default: info
log_level=info

# Where should the logs be written? 
# You must have access to write to this location. Recommended location is somewhere in your home folder.
# log_dir should be an absolute path with no trailing slash, eg "/home/yourname/log/mojo-discord"
log_dir=/path/to/log//mojo-discord

# Do you want the AI to learn from the chat messages in Discord?
# Set this to false if you talk about private or sensitive things that you don't want the bot to repeat.
# 1 = yes, 0 = no
learn = 0

# This section is for Last.FM Now Playing info
[lastfm]
# You will need a Last.FM Developer API account for this script to work.
# There is no way around it, since the request requires an API key and I will not share my own.
# Fortunately, this is easy to get! Simply head over to http://www.last.fm/api/account/create
# Once your account is created, the site will display your API Key and API Secret.
# WRITE THESE DOWN! Last.FM apparently has no way to look them up later, so don't lose them.
# This script only requires the api key.
api_key = xxx

# Use Last.FM functionality?
# This is required to use the NowPlaying command.
# 1 = yes, 0 = no
use_lastfm = 1

# This section is for YouTube API info, allowing you to use commands that leverage YouTube connectivity.
[youtube]
# If you want to use the YouTube component you will need a Google API key for the YouTube Data API.
# If not, set use_youtube to 0.
use_youtube = 1 
api_key = xxx

# This section is for Weather info provided by DarkSky API
[weather]
# If you want to use the weather component you will need an API Key from DarkSky.net
# It is free.
# If not, set use_weather to 0
use_weather = 1
api_key = xxx

# This section is for the Google Maps component.
# If you want to use Weather (Dark Sky) you need a Google Maps API Key from https://console.developers.google.com/apis
[maps]
use_maps = 1
api_key = xxx

# This section is for Cards Against Humanity.
# It uses cah-cards by Grinnz (https://github.com/Grinnz/cah-cards)
# You must clone that repo and host it somewhere the bot can access it.
# Put the URL below in the api_url field once you have done this.
[cah]
use_cah = 1
api_url = http://0:8080

# This section is for Twitch integration
# The api_key value should be your client ID, which you can create from your Connections tab: https://www.twitch.tv/settings/connections
[twitch]
use_twitch = 1
api_key = xxx

# This section is for Duolingo integration.
# You can pull user info / stats from that service, but it requires a login.
# If you do this, I strongly recommend you create a new account just for your bot to use.
# You don't want to log in with your personal account for a variety of reasons.
#
# If you don't want to enable the duolingo command, set "use_duolingo" to 0.
[duolingo]
use_duolingo = 1
username = TheLegend27
# The login POST request is now protected with ReCaptcha, but once we have a JWT everything else still works and the token practically never expires.
# Log in with a browser and use the console to get the jwt_token and csrf_token values:
#    document.cookie.match(new RegExp('(^| )jwt_token=([^;]+)'))[0].slice(11);
#    document.cookie.match(new RegExp('(^| )csrf_token=([^;]+)'))[0].slice(12);
# Remove the quotes and paste below:
jwt = xxxxxx.yyyyyyyy.zzzzzzzz
csrf = samplecsrf==

# Peeled API by Grinnz
# The API does not have a key, which is why I am putting it in a config variable only.
# The expected return looks like (in case you want to implement your own):
#
# {
#   "dex_no": 269,
#   "image_url": "https://pbs.twimg.com/media/Em_kPTmWEAg7BgF.png",
#   "tweet_url": "https://twitter.com/i/status/1328531387691970560"
# }
#
# 404 if not found.
#
# Leave use_peeled = 0 if you don't have an API or don't want to use it.
[peeled]
use_peeled = 0
api_url = https://yoursite.com/peeled

# AVWX provides METAR information via REST API
# http://avwx.rest/
[avwx]
use_avwx = 1
api_key = abcd1234
